class Node {
    constructor(char, left = null, right = null) {
        this.char = char;
        this.left = left;
        this.right = right;
    }
}

function convRecurs(unstructuredchars, curstring) {
    for (let char of unstructuredchars) {
        if (curstring === char[1]) {
            return new Node(char[0]);
        }
    }
    let node1 = convRecurs(unstructuredchars, curstring + "0");
    let node2 = convRecurs(unstructuredchars, curstring + "1");
    return new Node(null, node1, node2);
}

function returnEncoding(node, curstring, target) {
    if (node.char === target) {
        return curstring;
    }
    let l = node.left ? returnEncoding(node.left, curstring + "0", target) : null;
    let r = node.right ? returnEncoding(node.right, curstring + "1", target) : null;
    return l || r || null;
}

function encodePw(pw) {
    let hammingcode = 0;
    for (let ch of pw) {
        let encoding = returnEncoding(root, "", ch);
        if (encoding) {
            hammingcode += encoding.length;
        }
    }
    console.log(hammingcode);
}

function getEncoding() {
  const encoding = [['r', "0000"], ['0', "0001"], ['i', "0010"], ['c', "00110"], ['8', "00111"], ['o', "0100"], ['f', "010100"], ['E', "0101010000"], ['Q', "010101000100"], ['K', "010101000101"], ['D', "01010100011"], ['V', "010101001000"], ['Y', "010101001001"], ['O', "01010100101"], ['#', "0101010011000"], ['/', "010101001100100"], ['%', "01010100110010100"], ['^', "01010100110010101"], ['`', "0101010011001011"], ['$', "01010100110011"], ['U', "010101001101"], ['B', "01010100111"], ['T', "01010101000"], ['C', "01010101001"], ['!', "0101010101"], ['M', "01010101100"], ['+', "010101011010"], ['W', "010101011011"], ['.', "0101010111"], ['j', "0101011"], ['3', "01011"], ['m', "01100"], ['6', "011010"], ['p', "011011"], ['g', "011100"], ['k', "011101"], ['5', "011110"], ['4', "011111"], ['t', "10000"], ['9', "10001"], ['e', "1001"], ['x', "10100000"], ['I', "10100001000"], ['L', "10100001001"], ['@', "1010000101000"], [')', "101000010100100000"], ['>', "101000010100100001"], ['\'', "10100001010010001"], ['<', "10100001010010010"], ['=', "10100001010010011"], [',', "101000010100101"], ['[', "10100001010011000"], [']', "101000010100110010"], ['', "101000010100110011000000000"], ['', "101000010100110011000000001"], ['', "101000010100110011000000010"], ['', "101000010100110011000000011"], ['', "101000010100110011000000100"], ['', "101000010100110011000000101"], ['', "101000010100110011000000110"], ['', "101000010100110011000000111"], ['', "101000010100110011000001000"], ['', "101000010100110011000001001"], ['', "101000010100110011000001010"], ['', "101000010100110011000001011"], ['', "101000010100110011000001100"], ['', "101000010100110011000001101"], ['', "101000010100110011000001110"], ['', "101000010100110011000001111"], ['', "101000010100110011000010000"], ['', "101000010100110011000010001"], ['', "101000010100110011000010010"], ['', "101000010100110011000010011"], ['', "101000010100110011000010100"], ['', "101000010100110011000010101"], ['', "101000010100110011000010110"], ['', "101000010100110011000010111"], ['', "101000010100110011000011000"], [' ', "101000010100110011000011001"], ['¡', "101000010100110011000011010"], ['¢', "101000010100110011000011011"], ['£', "101000010100110011000011100"], ['¤', "101000010100110011000011101"], ['¥', "101000010100110011000011110"], ['¦', "101000010100110011000011111"], ['§', "101000010100110011000100000"], ['¨', "101000010100110011000100001"], ['©', "101000010100110011000100010"], ['ª', "101000010100110011000100011"], ['«', "101000010100110011000100100"], ['¬', "101000010100110011000100101"], ['­', "101000010100110011000100110"], ['®', "101000010100110011000100111"], ['¯', "101000010100110011000101000"], ['°', "101000010100110011000101001"], ['±', "101000010100110011000101010"], ['²', "101000010100110011000101011"], ['³', "101000010100110011000101100"], ['´', "101000010100110011000101101"], ['µ', "101000010100110011000101110"], ['¶', "101000010100110011000101111"], ['·', "101000010100110011000110000"], ['¸', "101000010100110011000110001"], ['¹', "101000010100110011000110010"], ['º', "101000010100110011000110011"], ['»', "101000010100110011000110100"], ['¼', "101000010100110011000110101"], ['½', "101000010100110011000110110"], ['¾', "101000010100110011000110111"], ['¿', "101000010100110011000111000"], ['À', "101000010100110011000111001"], ['Á', "101000010100110011000111010"], ['Â', "101000010100110011000111011"], ['Ã', "101000010100110011000111100"], ['Ä', "101000010100110011000111101"], ['Å', "101000010100110011000111110"], ['Æ', "101000010100110011000111111"], ['Ç', "101000010100110011001000000"], ['È', "101000010100110011001000001"], ['É', "101000010100110011001000010"], ['Ê', "101000010100110011001000011"], ['Ë', "101000010100110011001000100"], ['Ì', "101000010100110011001000101"], ['Í', "101000010100110011001000110"], ['Î', "101000010100110011001000111"], ['Ï', "101000010100110011001001000"], ['Ð', "101000010100110011001001001"], ['Ñ', "101000010100110011001001010"], ['Ò', "101000010100110011001001011"], ['Ó', "101000010100110011001001100"], ['Ô', "101000010100110011001001101"], ['Õ', "101000010100110011001001110"], ['Ö', "101000010100110011001001111"], ['×', "101000010100110011001010000"], ['Ø', "101000010100110011001010001"], ['Ù', "101000010100110011001010010"], ['Ú', "101000010100110011001010011"], ['Û', "101000010100110011001010100"], ['Ü', "101000010100110011001010101"], ['Ý', "101000010100110011001010110"], ['Þ', "101000010100110011001010111"], ['ß', "101000010100110011001011000"], ['à', "101000010100110011001011001"], ['á', "101000010100110011001011010"], ['â', "101000010100110011001011011"], ['ã', "101000010100110011001011100"], ['ä', "101000010100110011001011101"], ['å', "101000010100110011001011110"], ['æ', "101000010100110011001011111"], ['ç', "101000010100110011001100000"], ['è', "101000010100110011001100001"], ['é', "101000010100110011001100010"], ['ê', "101000010100110011001100011"], ['ë', "101000010100110011001100100"], ['ì', "101000010100110011001100101"], ['í', "101000010100110011001100110"], ['î', "101000010100110011001100111"], ['ï', "101000010100110011001101000"], ['ð', "101000010100110011001101001"], ['ñ', "101000010100110011001101010"], ['ò', "101000010100110011001101011"], ['ó', "101000010100110011001101100"], ['ô', "101000010100110011001101101"], ['õ', "101000010100110011001101110"], ['ö', "101000010100110011001101111"], ['÷', "101000010100110011001110000"], ['ø', "101000010100110011001110001"], ['ù', "101000010100110011001110010"], ['ú', "101000010100110011001110011"], ['û', "101000010100110011001110100"], ['ü', "101000010100110011001110101"], ['ý', "101000010100110011001110110"], ['þ', "101000010100110011001110111"], ['ÿ', "101000010100110011001111000"], [' ', "1010000101001100110011110010"], ['"', "1010000101001100110011110011"], ['\', "1010000101001100110011110100"], ['{', "1010000101001100110011110101"], ['|', "1010000101001100110011110110"], ['}', "1010000101001100110011110111"], ['', "1010000101001100110011111000"], ['', "1010000101001100110011111001"], ['', "1010000101001100110011111010"], ['', "1010000101001100110011111011"], ['', "1010000101001100110011111100"], ['', "1010000101001100110011111101"], ['', "1010000101001100110011111110"], ['', "1010000101001100110011111111"], ['~', "10100001010011001101"], ['(', "1010000101001100111"], [';', "1010000101001101"], ['&', "101000010100111"], ['J', "101000010101"], ['N', "10100001011"], ['A', "1010000110"], ['R', "10100001110"], ['G', "101000011110"], ['Z', "1010000111110"], ['?', "1010000111111"], ['w', "1010001"], ['7', "101001"], ['u', "101010"], ['b', "101011"], ['a', "1011"], ['v', "1100000"], ['z', "11000010"], ['-', "110000110000"], ['F', "110000110001"], ['X', "1100001100100"], [':', "11000011001010"], ['*', "11000011001011"], ['H', "110000110011"], ['S', "11000011010"], ['_', "110000110110"], ['P', "110000110111"], ['q', "110000111"], ['y', "110001"], ['l', "11001"], ['s', "11010"], ['2', "11011"], ['1', "1110"], ['h', "111100"], ['d', "111101"], ['n', "11111"]];
  return encoding;
}

document.addEventListener("DOMContentLoaded", () => {
	root = convRecurs(getEncoding(), "")
});